The application name is Owee. Why Owee?
This is the first name i came up with, but it can change. 
Basically this is the a neologism derive from the verb "to owe" someone.
An owee is a representation of an object that someone lend to another person. It defines all the propeties and actions of the object it's like a blueprint.
Let's take an example to clarify the idea.

Bob lent $10 to Amir on july the 1st.

Here the the owee represent
- the type of object Bob lent to Amir: money
- the value: $10
- when it started: july the 1st of 2014
- the due date: optional
- who he lent to : Amir
- the status about what he lent: Still lended or Given back
- a private notes about what he lent or about Amir: "Amir tends to forget remind him about the money"(optional)
- an email: Amir's email

Bob is also able to perform some action with the owee.
- He can ask the owee to change its status whenever the stuff is given back
- He can ask the owee to remind nicely lent that he still have the stuff


The project will use python for the model and the view controller, with a little bit of html embedded for the view.

1/ Create a class called Ower representing the loaner.

Ower instance variables:

- first_name : ower_first_name
- last_name : ower_last_name
- email : ower_email
- phone : ower_phone
- address : ower_address

Ower method:

- send reminder: send a reminder mail to the loaner


2/ create a class called Item representing the item the loaner lent.

Item_loaned instances variables:

- ower object: from the Ower class
- ID: unique id to easily retrieve the object
- the type of object he lent (string)
- the value: string
- start: the day he lent the stuff
- end: the day he has to give it back (string)
- status: default set as still lent (string)
- note : note comment about the stuff he lent (string)

Item_loaned methods:

- change status: the item was given back
- change date: change the due date



Owee instance method:
- reminder : it will send an nice email to remind him that he still have it
- change status: it will change the status from still lent to back and vice versa


3/ Create a dashboard.py file.
dashboard is design to be the helper module to be use by launcher.py
This is where helper functions to will be added:
- add owee
- delete owee
- display owee
- change status
- send a reminder
- check user inputs

This file will open a a web page displaying all the owees.
The first step is to build a html template.
Then fill the place holder with dynamic content each time an owee is added.

4/ Create launcher.py
Everything will be put together here. It's the user interface









